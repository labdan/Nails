<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Animated Booking System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Poppins:wght@300;400&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #FDF4F5; /* Soft dusty rose background */
        }
        .booking-container {
            font-family: 'Poppins', sans-serif;
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .step-title {
            font-family: 'Playfair Display', serif;
            color: #8D5B4C; /* Muted rose-gold color */
        }
        .service-bud {
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        .service-bud:hover {
            transform: scale(1.05);
        }
        .service-bud svg {
            filter: drop-shadow(0 4px 6px rgba(0,0,0,0.1));
        }
        .date-cell, .time-slot {
            cursor: pointer;
            transition: all 0.3s ease;
            border-radius: 9999px;
            border: 2px solid transparent;
        }
        .date-cell.available:hover, .time-slot:hover {
            background-color: #E8C2CA; /* Lighter rose */
            color: #fff;
        }
        .date-cell.selected, .time-slot.selected {
            background-color: #D1A3AC; /* Deeper rose */
            color: #fff;
            border-color: #8D5B4C;
        }
        .date-cell.disabled {
            color: #ccc;
            cursor: not-allowed;
        }
        .form-input {
            background: transparent;
            border-bottom: 2px solid #D1A3AC;
            transition: border-color 0.3s ease;
        }
        .form-input:focus {
            outline: none;
            border-color: #8D5B4C;
        }
        .btn-primary {
            background-color: #8D5B4C;
            color: white;
            transition: background-color 0.3s ease;
        }
        .btn-primary:hover {
            background-color: #7a4f41;
        }
        .btn-secondary {
            background: transparent;
            border: 2px solid #8D5B4C;
            color: #8D5B4C;
            transition: all 0.3s ease;
        }
        .btn-secondary:hover {
            background: #8D5B4C;
            color: white;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen">

    <div class="booking-container w-full max-w-2xl mx-auto rounded-2xl shadow-lg p-6 md:p-10 relative overflow-hidden">
        <div id="booking-steps">
            <!-- Step 1: Services -->
            <div id="step-1" class="step">
                <h2 class="step-title text-3xl font-bold text-center mb-8">Choose Your Service</h2>
                <div id="services-container" class="grid grid-cols-2 md:grid-cols-3 gap-6 md:gap-8">
                    <!-- Services will be injected here by JS -->
                </div>
            </div>

            <!-- Step 2: Date & Time -->
            <div id="step-2" class="step hidden">
                <h2 class="step-title text-3xl font-bold text-center mb-2">Pick a Date & Time</h2>
                <p class="text-center text-gray-500 mb-6">For: <span id="selected-service-text" class="font-semibold"></span></p>
                <div class="flex flex-col md:flex-row gap-8">
                    <!-- Calendar -->
                    <div class="flex-1">
                        <div id="calendar-header" class="flex justify-between items-center mb-4">
                            <button id="prev-month" class="p-2 rounded-full hover:bg-gray-200">&lt;</button>
                            <h3 id="month-year" class="font-bold text-xl text-gray-700"></h3>
                            <button id="next-month" class="p-2 rounded-full hover:bg-gray-200">&gt;</button>
                        </div>
                        <div id="calendar-grid" class="grid grid-cols-7 gap-1 text-center">
                            <!-- Calendar days will be injected here -->
                        </div>
                    </div>
                    <!-- Time Slots -->
                    <div id="time-slots-container" class="w-full md:w-48">
                        <h3 class="font-bold text-lg text-center text-gray-700 mb-4">Available Times</h3>
                        <div id="time-slots" class="flex flex-wrap md:flex-col gap-2 justify-center">
                           <!-- Time slots will be injected here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 3: Your Details -->
            <div id="step-3" class="step hidden">
                <h2 class="step-title text-3xl font-bold text-center mb-8">Your Details</h2>
                <div class="space-y-8">
                    <div class="relative form-field">
                        <input type="text" id="name" class="form-input w-full p-2 text-lg" placeholder=" ">
                        <label for="name" class="absolute left-2 -top-3.5 text-gray-600 text-sm transition-all">Full Name</label>
                    </div>
                    <div class="relative form-field">
                        <input type="email" id="email" class="form-input w-full p-2 text-lg" placeholder=" ">
                        <label for="email" class="absolute left-2 -top-3.5 text-gray-600 text-sm transition-all">Email</label>
                    </div>
                    <div class="relative form-field">
                        <input type="tel" id="phone" class="form-input w-full p-2 text-lg" placeholder=" ">
                        <label for="phone" class="absolute left-2 -top-3.5 text-gray-600 text-sm transition-all">Phone Number</label>
                    </div>
                </div>
            </div>

            <!-- Step 4: Confirmation -->
            <div id="step-4" class="step hidden text-center">
                <div id="confirmation-flower" class="mx-auto mb-4"></div>
                <h2 class="step-title text-3xl font-bold text-center mb-4">Appointment Booked!</h2>
                <p class="text-gray-600 text-lg">Thank you, <span id="conf-name" class="font-semibold"></span>!</p>
                <p class="text-gray-500 mt-2">A confirmation has been sent to your email.</p>
                <div class="mt-6 bg-rose-50 p-4 rounded-lg border border-rose-200">
                    <p class="font-semibold text-gray-700"><span id="conf-service"></span></p>
                    <p class="text-gray-600"><span id="conf-date"></span> at <span id="conf-time"></span></p>
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <div id="navigation-buttons" class="mt-10 flex justify-between">
            <button id="back-btn" class="btn-secondary px-6 py-2 rounded-lg font-semibold" style="visibility: hidden;">Back</button>
            <button id="next-btn" class="btn-primary px-6 py-2 rounded-lg font-semibold" style="visibility: hidden;">Next</button>
        </div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- STATE MANAGEMENT ---
            const bookingState = {
                currentStep: 1,
                service: null,
                date: null,
                time: null,
                details: {
                    name: '',
                    email: '',
                    phone: ''
                }
            };

            const services = [
                { name: 'Classic Manicure', budColor: '#fecaca', bloomColor: '#f87171' },
                { name: 'Gel Manicure', budColor: '#fed7aa', bloomColor: '#fb923c' },
                { name: 'Acrylic Extensions', budColor: '#bfdbfe', bloomColor: '#60a5fa' },
                { name: 'Nail Art', budColor: '#d8b4fe', bloomColor: '#c084fc' },
                { name: 'Pedicure', budColor: '#bbf7d0', bloomColor: '#4ade80' },
                { name: 'Spa Treatment', budColor: '#fef08a', bloomColor: '#facc15' },
            ];

            let currentDate = new Date();

            // --- DOM ELEMENTS ---
            const steps = document.querySelectorAll('.step');
            const backBtn = document.getElementById('back-btn');
            const nextBtn = document.getElementById('next-btn');
            const servicesContainer = document.getElementById('services-container');

            // --- FLOWER SVG FACTORY ---
            const createFlowerSVG = (id, budColor, bloomColor) => {
                const svgNS = "http://www.w3.org/2000/svg";
                const svg = document.createElementNS(svgNS, "svg");
                svg.setAttribute("viewBox", "0 0 100 100");
                svg.setAttribute("width", "100%");
                svg.setAttribute("height", "100%");
                
                const defs = document.createElementNS(svgNS, 'defs');
                const gradient = document.createElementNS(svgNS, 'radialGradient');
                gradient.setAttribute('id', `grad-${id}`);
                gradient.innerHTML = `
                    <stop offset="0%" stop-color="#FFF" stop-opacity="0.7"/>
                    <stop offset="100%" stop-color="${budColor}"/>
                `;
                defs.appendChild(gradient);
                svg.appendChild(defs);
                
                // Petals
                for (let i = 0; i < 6; i++) {
                    const petal = document.createElementNS(svgNS, "path");
                    petal.setAttribute("class", "petal");
                    petal.setAttribute("fill", `url(#grad-${id})`);
                    petal.setAttribute("d", "M 50 0 C 20 20, 20 50, 50 50 C 80 50, 80 20, 50 0 Z");
                    petal.setAttribute("transform-origin", "50 50");
                    petal.setAttribute("transform", `rotate(${i * 60})`);
                    svg.appendChild(petal);
                }

                return svg;
            };

            // --- ANIMATIONS ---
            const animateStep = (fromStep, toStep, direction = 'forward') => {
                const current = steps[fromStep - 1];
                const next = steps[toStep - 1];
                
                const duration = 600;
                const easing = 'easeInOutExpo';
                const translateX = direction === 'forward' ? '100px' : '-100px';

                anime.timeline({
                    duration,
                    easing,
                })
                .add({
                    targets: current,
                    translateX: `-${translateX}`,
                    opacity: 0,
                    complete: () => {
                        current.classList.add('hidden');
                    }
                })
                .add({
                    targets: next,
                    translateX: [translateX, 0],
                    opacity: [0, 1],
                    begin: () => {
                        next.classList.remove('hidden');
                    }
                }, '-=300'); // Overlap animations
            };
            
            // --- UI UPDATE FUNCTIONS ---
            const updateNavButtons = () => {
                backBtn.style.visibility = bookingState.currentStep > 1 && bookingState.currentStep < 4 ? 'visible' : 'hidden';
                nextBtn.style.visibility = bookingState.currentStep < 4 ? 'visible' : 'hidden';

                if (bookingState.currentStep === 1) nextBtn.disabled = !bookingState.service;
                if (bookingState.currentStep === 2) nextBtn.disabled = !bookingState.date || !bookingState.time;
                if (bookingState.currentStep === 3) nextBtn.textContent = 'Confirm Booking';
                else nextBtn.textContent = 'Next';
            };

            const goToStep = (step) => {
                const direction = step > bookingState.currentStep ? 'forward' : 'backward';
                animateStep(bookingState.currentStep, step, direction);
                bookingState.currentStep = step;
                updateNavButtons();
            };

            // --- STEP 1: SERVICES LOGIC ---
            const initServices = () => {
                servicesContainer.innerHTML = '';
                services.forEach((service, index) => {
                    const budWrapper = document.createElement('div');
                    budWrapper.className = 'service-bud';
                    budWrapper.dataset.service = service.name;
                    budWrapper.innerHTML = `
                        <div class="w-24 h-24 mx-auto bud-svg-container"></div>
                        <p class="text-center mt-2 font-semibold text-gray-700">${service.name}</p>
                    `;
                    const svgContainer = budWrapper.querySelector('.bud-svg-container');
                    const flowerSVG = createFlowerSVG(index, service.budColor, service.bloomColor);
                    svgContainer.appendChild(flowerSVG);

                    // Initial closed bud state
                    anime.set(flowerSVG.querySelectorAll('.petal'), {
                        scale: 0.3,
                        translateX: '25px',
                        translateY: '25px',
                    });

                    budWrapper.addEventListener('mouseenter', () => {
                        if (bookingState.service !== service.name) {
                            anime({
                                targets: flowerSVG.querySelectorAll('.petal'),
                                scale: 0.35,
                                duration: 300,
                                easing: 'easeOutQuad'
                            });
                        }
                    });

                    budWrapper.addEventListener('mouseleave', () => {
                         if (bookingState.service !== service.name) {
                            anime({
                                targets: flowerSVG.querySelectorAll('.petal'),
                                scale: 0.3,
                                duration: 300,
                                easing: 'easeOutQuad'
                            });
                        }
                    });

                    budWrapper.addEventListener('click', () => handleServiceSelection(service, budWrapper, flowerSVG));
                    servicesContainer.appendChild(budWrapper);
                });
            };

            const handleServiceSelection = (selectedService, selectedWrapper, selectedSVG) => {
                if (bookingState.service === selectedService.name) return;
                
                bookingState.service = selectedService.name;
                document.getElementById('selected-service-text').textContent = selectedService.name;
                
                const allBuds = document.querySelectorAll('.service-bud');

                allBuds.forEach(bud => {
                    const svg = bud.querySelector('svg');
                    const isSelected = bud.dataset.service === selectedService.name;

                    anime({
                        targets: svg.querySelectorAll('.petal'),
                        scale: isSelected ? 1 : 0,
                        translateX: isSelected ? 0 : '25px',
                        translateY: isSelected ? 0 : '25px',
                        duration: 800,
                        easing: 'easeInOutExpo',
                    });
                    
                    anime({
                        targets: bud.querySelector('p'),
                        opacity: isSelected ? 1 : 0,
                        translateY: isSelected ? 0 : '10px',
                        duration: 500,
                        delay: 100
                    });
                });
                
                setTimeout(() => goToStep(2), 500);
            };

            // --- STEP 2: CALENDAR & TIME LOGIC ---
            const renderCalendar = () => {
                const monthYearEl = document.getElementById('month-year');
                const calendarGrid = document.getElementById('calendar-grid');
                calendarGrid.innerHTML = '';
                
                const month = currentDate.getMonth();
                const year = currentDate.getFullYear();
                monthYearEl.textContent = `${currentDate.toLocaleString('default', { month: 'long' })} ${year}`;

                const firstDay = new Date(year, month, 1).getDay();
                const daysInMonth = new Date(year, month + 1, 0).getDate();

                ['S','M','T','W','T','F','S'].forEach(day => {
                    calendarGrid.innerHTML += `<div class="font-bold text-gray-500">${day}</div>`;
                });

                for (let i = 0; i < firstDay; i++) {
                    calendarGrid.innerHTML += '<div></div>';
                }

                for (let i = 1; i <= daysInMonth; i++) {
                    const today = new Date();
                    const cellDate = new Date(year, month, i);
                    let classes = 'date-cell p-2 w-8 h-8 flex items-center justify-center ';
                    
                    if (cellDate < today.setHours(0,0,0,0)) {
                        classes += 'disabled';
                    } else {
                        classes += 'available';
                    }
                    
                    const cell = document.createElement('div');
                    cell.className = classes;
                    cell.textContent = i;
                    cell.dataset.date = cellDate.toISOString().split('T')[0];
                    calendarGrid.appendChild(cell);
                }

                document.querySelectorAll('.date-cell.available').forEach(cell => {
                    cell.addEventListener('click', () => {
                        document.querySelectorAll('.date-cell.selected').forEach(c => c.classList.remove('selected'));
                        cell.classList.add('selected');
                        bookingState.date = cell.dataset.date;
                        renderTimeSlots();
                        updateNavButtons();
                    });
                });
            };

            const renderTimeSlots = () => {
                const timeSlotsContainer = document.getElementById('time-slots');
                timeSlotsContainer.innerHTML = '';
                const times = ['09:00', '10:00', '11:00', '13:00', '14:00', '15:00', '16:00'];
                
                times.forEach(time => {
                    const slot = document.createElement('div');
                    slot.className = 'time-slot p-2 w-full text-center border-2 border-rose-200';
                    slot.textContent = time;
                    slot.dataset.time = time;
                    timeSlotsContainer.appendChild(slot);
                });
                
                anime({
                    targets: '.time-slot',
                    translateY: [-30, 0],
                    opacity: [0, 1],
                    delay: anime.stagger(100, {start: 100}),
                    easing: 'easeOutElastic(1, .8)'
                });

                document.querySelectorAll('.time-slot').forEach(slot => {
                    slot.addEventListener('click', () => {
                        document.querySelectorAll('.time-slot.selected').forEach(s => s.classList.remove('selected'));
                        slot.classList.add('selected');
                        bookingState.time = slot.dataset.time;
                        updateNavButtons();
                    });
                });
            };
            
            document.getElementById('prev-month').addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            });
            document.getElementById('next-month').addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            });

            // --- STEP 3: DETAILS ---
            const animateForm = () => {
                anime({
                    targets: '.form-field',
                    opacity: [0, 1],
                    translateY: [20, 0],
                    delay: anime.stagger(200),
                    easing: 'easeOutExpo'
                });
            };

            // --- STEP 4: CONFIRMATION ---
            const showConfirmation = () => {
                document.getElementById('conf-name').textContent = bookingState.details.name;
                document.getElementById('conf-service').textContent = bookingState.service;
                document.getElementById('conf-date').textContent = new Date(bookingState.date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                document.getElementById('conf-time').textContent = bookingState.time;

                const confirmationFlower = document.getElementById('confirmation-flower');
                confirmationFlower.innerHTML = '';
                const finalFlower = createFlowerSVG('final', '#d8b4fe', '#c084fc');
                finalFlower.setAttribute('width', '150');
                finalFlower.setAttribute('height', '150');
                confirmationFlower.appendChild(finalFlower);
                
                anime.set(finalFlower.querySelectorAll('.petal'), {
                    scale: 0
                });

                anime({
                    targets: finalFlower.querySelectorAll('.petal'),
                    scale: 1,
                    rotate: '+=15',
                    duration: 1500,
                    delay: anime.stagger(100),
                    easing: 'easeOutElastic(1, .5)'
                });
            };

            // --- EVENT LISTENERS ---
            nextBtn.addEventListener('click', () => {
                if (bookingState.currentStep === 3) {
                    bookingState.details.name = document.getElementById('name').value;
                    bookingState.details.email = document.getElementById('email').value;
                    bookingState.details.phone = document.getElementById('phone').value;
                    // Simple validation
                    if(bookingState.details.name && bookingState.details.email) {
                        goToStep(4);
                        showConfirmation();
                    } else {
                        alert('Please fill in your name and email.');
                    }
                } else {
                    const nextStep = bookingState.currentStep + 1;
                    goToStep(nextStep);
                    if (nextStep === 3) {
                       animateForm();
                    }
                }
            });

            backBtn.addEventListener('click', () => {
                const prevStep = bookingState.currentStep - 1;
                if (prevStep === 1) {
                    // Reset service selection for re-animation
                    initServices(); 
                    bookingState.service = null;
                }
                 if(prevStep > 0) {
                     goToStep(prevStep);
                 }
            });
            
            // --- INITIALIZATION ---
            initServices();
            renderCalendar();
            updateNavButtons();
        });
    </script>
</body>
</html>
